#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100


char stack[MAX_SIZE];
int top = -1;

int isEmpty() {
    return top == -1;
}

void push(char item) {
    if (top >= MAX_SIZE - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = item;
}

char pop() {
    if (isEmpty()) {
        return '\0'; 
    }
    return stack[top--];
}

char peek() {
    if (isEmpty()) {
        return '\0';
    }
    return stack[top];
}


int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return 0;
    }
}


void infixToPostfix(char* infix, char* postfix) {
    int i, j;
    char next_char;

     
    top = -1;
    j = 0;

    for (i = 0; i < strlen(infix); i++) {
        next_char = infix[i];

        
        if (isalnum(next_char)) {
            postfix[j++] = next_char;
        }
        // Opening parenthesis
        else if (next_char == '(') {
            push(next_char);
        }
        
        else if (next_char == ')') {
            while (!isEmpty() && peek() != '(') {
                postfix[j++] = pop();
            }
            if (!isEmpty() && peek() == '(')
                pop();
            else {
                printf("Error: Mismatched parentheses.\n");
                return;
            }
        }
        // Operator
        else {
            while (!isEmpty() && peek() != '(' &&
                   precedence(peek()) >= precedence(next_char)) {
                postfix[j++] = pop();
            }
            push(next_char);
        }
    }

    
    while (!isEmpty()) {
        if (peek() == '(') {
            printf("Error: Mismatched parentheses.\n");
            return;
        }
        postfix[j++] = pop();
    }

    postfix[j] = '\0';
}


int main() {
    char infix[MAX_SIZE];
    char postfix[MAX_SIZE];

    printf("Enter a valid parenthesized infix expression (single char operands, +, -, *, /):\n");

    if (scanf("%s", infix) != 1) {
        return 1;
    }

    printf("\nInfix Expression: %s\n", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix Expression: %s\n", postfix);

    return 0;
}
